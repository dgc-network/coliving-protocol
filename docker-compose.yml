version: "3.9"

x-logging:
  &default-logging
  options:
    max-size: "50m"
    max-file: "3"
  driver: json-file

services:
  # data-contracts

  data-ganache:
    build:
      context: data-contracts
      dockerfile: Dockerfile.dev
      args:
        bootstrapSPIds: ${BOOTSTRAP_SP_IDS}
        bootstrapSPDelegateWallets: ${BOOTSTRAP_SP_DELEGATE_WALLETS}
        bootstrapSPOwnerWallets: ${BOOTSTRAP_SP_OWNER_WALLETS}
    command: bash /tmp/dev-tools/startup/data-ganache.sh
    volumes:
      - data-contracts-abis:/usr/src/app/build/data-contracts
      - ./dev-tools:/tmp/dev-tools
    ports:
      - "8545:8545"
    logging: *default-logging
    deploy:
      mode: global

  data-blockscout-db:
    image: postgres:13.6
    environment:
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_USER: 'postgres'
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global

  data-blockscout:
    image: blockscout/blockscout:4.1.3
    command: 'mix do ecto.create, ecto.migrate, phx.server'
    environment:
      ETHEREUM_JSONRPC_VARIANT: 'ganache'
      ETHEREUM_JSONRPC_HTTP_URL: 'http://data-ganache:8545'
      ETHEREUM_JSONRPC_WS_URL: 'ws://data-ganache:8545'
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: 'true'
      DATABASE_URL: 'postgresql://postgres:postgres@data-blockscout-db:5432/postgres?ssl=false'
      ECTO_USE_SSL: false
    ports:
      - "9545:4000"
    depends_on:
      data-blockscout-db:
        condition: service_healthy
      data-ganache:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: global

  # eth-contracts

  eth-ganache:
    build:
      context: eth-contracts
      dockerfile: Dockerfile.dev
      args:
        CONTENT_NODE_VERSION: ${CONTENT_NODE_VERSION}
        DISCOVERY_NODE_VERSION: ${DISCOVERY_NODE_VERSION}
    volumes:
      - eth-contracts-abis:/usr/src/app/build/contracts
    ports:
      - "8546:8545"
    logging: *default-logging
    deploy:
      mode: global

  eth-blockscout-db:
    image: postgres:13.6
    environment:
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_USER: 'postgres'
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global

  eth-blockscout:
    image: blockscout/blockscout:4.1.3
    command: 'mix do ecto.create, ecto.migrate, phx.server'
    environment:
      ETHEREUM_JSONRPC_VARIANT: 'ganache'
      ETHEREUM_JSONRPC_HTTP_URL: 'http://eth-ganache:8545'
      ETHEREUM_JSONRPC_WS_URL: 'ws://eth-ganache:8545'
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: 'true'
      DATABASE_URL: 'postgresql://postgres:postgres@eth-blockscout-db:5432/postgres?ssl=false'
      ECTO_USE_SSL: false
    ports:
      - "9546:4000"
    depends_on:
      eth-blockscout-db:
        condition: service_healthy
      eth-ganache:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: global

  # build libs

  build-coliving-libs:
    build: libs
    command: sh /tmp/dev-tools/startup/build-coliving-libs.sh
    volumes:
      - coliving-libs:/usr/src/app
      - data-contracts-abis:/usr/src/data-contracts/ABIs
      - eth-contracts-abis:/usr/src/eth-contracts/ABIs
      - ./libs/src:/usr/src/app/src
      - ./dev-tools:/tmp/dev-tools
    depends_on:
      data-ganache:
        condition: service_started
      eth-ganache:
        condition: service_started
    logging: *default-logging
    deploy:
      mode: global

  # identity-service

  identity-service-db:
    image: postgres:11.4
    user: postgres
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global

  identity-service-redis:
    image: redis:5.0.5
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global

  identity-service:
    build: identity-service
    command: scripts/dev-server.sh
    ports:
      - "7000:7000"
      - "9229:9229"
    environment:
      logLevel: debug
      minimumBalance: 1
      minimumRelayerBalance: 1
      minimumFunderBalance: 1

      blacklisterPrivateKey: "87e08695a0c368b9fcbf7420183d266514a1b70791fd0b4254b3cbb8373803c7"
      blacklisterPublicKey: "0xcccc36bE44D106C6aC14199A2Ed6a29fDa25d5Ae"
      relayerPrivateKey: "34efbbc0431c7f481cdba15d65bbc9ef47196b9cf38d5c4b30afa2bcf86fafba"
      relayerPublicKey: "0xaaaa90Fc2bfa70028D6b444BB9754066d9E2703b"
      relayerWallets: '[{"publicKey": "0xaaaa90Fc2bfa70028D6b444BB9754066d9E2703b", "privateKey": "34efbbc0431c7f481cdba15d65bbc9ef47196b9cf38d5c4b30afa2bcf86fafba"}, {"publicKey": "0xBE718F98a5B5a473186eB6E30888F26E72be0b66", "privateKey": "d3426cd10c4e75207bdc4802c551d21faa89a287546c2c6b3d9a0476f34934d2"}]'
      ethFunderAddress: "0xaaaa90Fc2bfa70028D6b444BB9754066d9E2703b"
      userVerifierPrivateKey: "ebba299e6163ff3208de4e82ce7db09cf7e434847b5bdab723af96ae7c763a0e"
      userVerifierPublicKey: "0xbbbb93A6B3A1D6fDd27909729b95CCB0cc9002C0'"
      ethRelayerWallets: '[{"publicKey": "0xaaaa90Fc2bfa70028D6b444BB9754066d9E2703b", "privateKey": "34efbbc0431c7f481cdba15d65bbc9ef47196b9cf38d5c4b30afa2bcf86fafba"}, {"publicKey": "0xBE718F98a5B5a473186eB6E30888F26E72be0b66", "privateKey": "d3426cd10c4e75207bdc4802c551d21faa89a287546c2c6b3d9a0476f34934d2"}, {"publicKey": "0xE75dEe171b6472cE30358ede946CcDFfCA70b562", "privateKey": "8a7c63d4aea87647f480e4771ea279f90f8e912fcfe907525bc931f531e564ce"}, {"publicKey": "0x58908c329D3be43261a3768aA2BBF413b36C935C", "privateKey": "712f210f132d2983e1e2d233f38b80aa12b9d5638ef4eeb78792c61622baf3d5"}, {"publicKey": "0xA0614b332312C5d81BE5b1877169E09041e5769F", "privateKey": "fc0ebb16ccb2fc42afb80336a358f17732cb9a47a96d0af1f474798726f92141"}]'

      dbUrl: "postgres://postgres:postgres@identity-service-db:5432/postgres"

      redisHost: "identity-service-redis"
      redisPort: 6379

      web3Provider: "http://data-ganache:8545"
      secondaryWeb3Provider: "http://data-ganache:8545"
      registryAddress: "${POA_REGISTRY_ADDRESS}"
      ownerWallet: "${POA_OWNER_WALLET}"

      ethProviderUrl: "http://eth-ganache:8545"
      ethTokenAddress: "${ETH_TOKEN_ADDRESS}"
      ethRegistryAddress: "${ETH_REGISTRY_ADDRESS}"
      ethOwnerWallet: "${ETH_OWNER_WALLET}"

    volumes:
      - ./identity-service/src:/usr/src/app/src
      - coliving-libs:/usr/src/coliving-libs
    depends_on:
      identity-service-db:
        condition: service_healthy
      identity-service-redis:
        condition: service_healthy
      data-ganache:
        condition: service_healthy
      eth-ganache:
        condition: service_healthy
      build-coliving-libs:
        condition: service_started
    logging: *default-logging
    deploy:
      mode: global

  # discovery-node

  discovery-node:
    build: discovery-node
    command: sh -c ". /tmp/dev-tools/startup/startup.sh && scripts/start.sh"
    env_file: .env # used by the startup script
    environment:
      PYTHONPYCACHEPREFIX: /tmp/pycache

      coliving_web3_host: "data-ganache"
      coliving_web3_port: "8545"
      coliving_web3_eth_provider_url: "http://eth-ganache:8545"
      coliving_contracts_registry: "${POA_REGISTRY_ADDRESS}"
      coliving_eth_contracts_registry: "${ETH_REGISTRY_ADDRESS}"
      coliving_eth_contracts_token: "${ETH_TOKEN_ADDRESS}"
      coliving_discprov_dev_mode: "true"
    volumes:
      - ./discovery-node:/coliving-discovery-node
      - data-contracts-abis:/coliving-discovery-node/build/data-contracts
      - eth-contracts-abis:/coliving-discovery-node/build/eth-contracts
      - ./dev-tools:/tmp/dev-tools
    depends_on:
      data-ganache:
        condition: service_healthy
      eth-ganache:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: replicated

  # content-node

  content-node:
    build: content-node
    command: sh -c ". /tmp/dev-tools/startup/startup.sh && scripts/start.sh"
    env_file: .env # used by the startup script
    environment:
      logLevel: "debug"
      devMode: "true"
      contentNodeIsDebug: "true"
      debuggerPort: 10000

      rateLimitingColivingUserReqLimit: 3000
      rateLimitingUserReqLimit: 3000
      rateLimitingMetadataReqLimit: 3000
      rateLimitingImageReqLimit: 6000
      rateLimitingAgreementReqLimit: 6000
      rateLimitingBatchCidsExistLimit: 1
      maxAudioFileSizeBytes: 250000000
      maxMemoryFileSizeBytes: 50000000

      ethProviderUrl: "http://eth-ganache:8545"
      ethTokenAddress: "${ETH_TOKEN_ADDRESS}"
      ethRegistryAddress: "${ETH_REGISTRY_ADDRESS}"
      ethOwnerWallet: "${ETH_OWNER_WALLET}"

      dataProviderUrl: "http://data-ganache:8545"
      dataRegistryAddress: "${POA_REGISTRY_ADDRESS}"
    volumes:
      - ./content-node/src:/usr/src/app/src
      - coliving-libs:/usr/src/coliving-libs
      - ./dev-tools:/tmp/dev-tools
    depends_on:
      data-ganache:
        condition: service_healthy
      eth-ganache:
        condition: service_healthy
      build-coliving-libs:
        condition: service_started
    logging: *default-logging
    deploy:
      mode: replicated

  proxy:
    image: alpine:3.16.0
    command: sh /tmp/dev-tools/startup/proxy.sh
    ports:
      - "4000-4010:4000-4010"
      - "5000-5010:5000-5010"
    volumes:
      - ./dev-tools:/tmp/dev-tools
    logging: *default-logging
    deploy:
      mode: global

  # SOCKS5 proxy for use with client

  socks5-proxy:
    image: serjs/go-socks5-proxy:v0.0.3
    ports:
      - "1080:1080"

  socks5-proxy-pac:
    image: python:3.10.5
    command: sh -c "head -n-1 /etc/hosts > /etc/hosts && python /tmp/dev-tools/startup/socks5-proxy-pac.py"
    ports:
      - "8080:80"
    volumes:
      - ./dev-tools:/tmp/dev-tools

volumes:
  data-contracts-abis:
  eth-contracts-abis:
  coliving-libs:
