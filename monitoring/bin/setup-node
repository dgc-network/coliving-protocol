#!/usr/bin/env bash

# This *should* run as is, but was developed manually for our first long-lived node

set -xe

function install_docker() {
    sudo apt-get update
    sudo apt-get install -y \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
$(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install docker-ce docker-ce-cli containerd.io
    sudo groupadd docker
    sudo usermod -aG docker $USER
    
    cat <<EOF | sudo tee /etc/docker/daemon.json >/dev/null
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
EOF

    exit
}

function install_docker_compose() {
    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
}

function clone_repo() {
    sudo apt-get install -y git
    git clone git@github.com:dgc-network/load-test-tools.git
}

function install_pip() {
    sudo apt install -y python3-pip
}

function install_requirements() {
    sudo apt-get install -y \
        htop \
        jq
    pip3 install -r ~/load-test-tools/requirements.txt
    exit
}

function setup() {
    (
        cd ~/load-test-tools
        ./bin/envtouch.sh
        docker-compose build
    )
}

function start_grafana() {
    (
        cd ~/load-test-tools
        docker-compose up -d grafana prometheus
        sleep 10
        ./grafana/bin/create-data-sources.sh
        ./grafana/bin/upload-dashboards.sh
        ./grafana/bin/upload-library-panels.sh
    )
}

install_docker
install_docker_compose
clone_repo
install_pip
install_requirements
setup
start_grafana

# echo 'export GRAFANA_PASS=PASSWORD' >> ~/.profile