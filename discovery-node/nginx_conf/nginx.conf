# This config rate limits and redirect requests that exceed the rate limit to other discovery nodes.

# The requests are rate limited by only allowing config.limit_to_rps requests every second to the discovery node; requests are redirected to other discovery nodes following this.

# To avoid infinite redirection, we set redirect_nonce, redirect_sig, and redirect_from when redirecting; the discovery node receiving the redirect verifies this signature. We have a nonce to avoid an attacker from being able to get a valid redirect_sig since that could be used to focus a DDoS attack on a single node.

worker_processes 1;

error_log logs/error.log notice;

env coliving_openresty_accept_redirect_from;
env coliving_discprov_url;
env coliving_openresty_rps;
env coliving_openresty_redirect_targets;
env coliving_openresty_rsa_private_key;
env coliving_openresty_rsa_public_key;

events {
    worker_connections 4096;
}

http {
    # set dns nginx should use for resolving external domains
    resolver 1.1.1.1;

    # set lua_socket_keepalive_timeout to 3 mins to fix problems when fetching redirect_weights
    lua_socket_keepalive_timeout 180s;

    proxy_cache_path /usr/local/openresty/cache levels=1:2 keys_zone=cache:10m max_size=1g inactive=1m use_temp_path=off;

    proxy_read_timeout 600; # 10 mins in seconds

    lua_package_path "/usr/local/openresty/conf/?.lua;;";

    lua_shared_dict limit_count_store 100m;
    lua_shared_dict locks 12k;
    lua_shared_dict nonce_store 10m;
    lua_shared_dict request_count 10m;
    lua_shared_dict rsa_public_key_store 10m;

    init_worker_by_lua_block {
        local main = require "main"
        main.start_update_redirect_weights_timer()
    }

    server {
        listen 5000;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $remote_addr;

        location = /openresty_pubkey {
            content_by_lua_block {
                local config = require "config"
                ngx.say(config.rsa_public_key)
            }
        }

        location = /request_count {
            content_by_lua_block {
                ngx.say(ngx.shared.request_count:get("request-count"))
            }
        }

        location /v1/metrics {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Do not redirect any /v1/challenges/... requests, which need to resolve
        # to the node that the request was intended for. Selection of
        # nodes to respond to challenge attestations is intentional.
        location /v1/challenges {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location ~* .*/trending/.* {
            access_by_lua_block {
                local main = require "main"
                main.mark_request_processing()
                return main.limit_to_rps()
            }

            log_by_lua_block {
                local main = require "main"
                main.mark_request_processed()
            }

            # Don't use cache if user_id or X-User-ID is set
            proxy_cache_bypass $arg_user_id$http_x_user_id;
            proxy_no_cache $arg_user_id$http_x_user_id;

            proxy_cache_valid any 5m;
            proxy_cache cache;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_lock on;

            proxy_pass http://127.0.0.1:3000;
        }

        location ~* .*/search/.* {
            access_by_lua_block {
                local main = require "main"
                main.mark_request_processing()
                return main.limit_to_rps()
            }

            log_by_lua_block {
                local main = require "main"
                main.mark_request_processed()
            }

            # Don't use cache if user_id or X-User-ID is set
            proxy_cache_bypass $arg_user_id$http_x_user_id;
            proxy_no_cache $arg_user_id$http_x_user_id;

            proxy_cache_valid any 60s;
            proxy_cache cache;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_lock on;

            proxy_pass http://127.0.0.1:3000;
        }

        location /v1 {
            access_by_lua_block {
                local main = require "main"
                main.mark_request_processing()
                return main.limit_to_rps()
            }

            log_by_lua_block {
                local main = require "main"
                main.mark_request_processed()
            }

            proxy_cache_valid any 1s;
            proxy_cache cache;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            proxy_cache_lock on;

            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
