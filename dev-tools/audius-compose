#!/usr/bin/env python3

import json
import pathlib
import subprocess

import click
import dotenv
import eth_account
import solana.keypair


def generate_env(protocol_dir, creator_node_replicas):
    config = {}
    if (protocol_dir / "dev-tools/config.json").exists():
        config = json.load((protocol_dir / "dev-tools/config.json").open())

    env = {}

    env["CONTENT_NODE_VERSION"] = json.loads(
        (protocol_dir / "content-node/.version.json").read_text(),
    )["version"]

    env["DISCOVERY_NODE_VERSION"] = json.loads(
        (protocol_dir / "discovery-node/.version.json").read_text(),
    )["version"]

    for name, secret_key in config.get("solana-accounts", {}).items():
        keypair = solana.keypair.Keypair.from_secret_key(bytes(secret_key))
        env[f"{name}_SECRET_KEY"] = json.dumps(list(keypair.secret_key))
        env[f"{name}_PUBLIC_KEY"] = keypair.public_key.to_base58().decode()

    for name, private_key in config.get("eth-accounts", {}).items():
        account = eth_account.Account.from_key(private_key)
        env[f"{name}_PRIVATE_KEY"] = account.key.hex()
        env[f"{name}_ADDRESS"] = account.address

    bootstrap_sp_ids = []
    bootstrap_sp_owner_wallets = []
    for replica in range(creator_node_replicas):
        if f"CN{replica}_SP_OWNER_ADDRESS" in env:
            bootstrap_sp_ids.append(str(replica + 1))
            bootstrap_sp_owner_wallets.append(env[f"CN{replica}_SP_OWNER_ADDRESS"])
    env["BOOTSTRAP_SP_IDS"] = ",".join(bootstrap_sp_ids)
    env["BOOTSTRAP_SP_OWNER_WALLETS"] = ",".join(bootstrap_sp_owner_wallets)
    env["BOOTSTRAP_SP_DELEGATE_WALLETS"] = ",".join(bootstrap_sp_owner_wallets)

    for key, value in config.get("extra-env", {}).items():
        env[key] = value

    # generate config.env used by startup scripts
    env_file = protocol_dir / ".env"
    env_file.touch()
    env_file.write_text("# DO NOT EDIT THIS FILE\n")
    for key, value in env.items():
        dotenv.set_key(env_file, key, value)


@click.group()
@click.option(
    "--protocol-dir",
    envvar="PROTOCOL_DIR",
    type=click.Path(
        exists=True, file_okay=False, resolve_path=True, path_type=pathlib.Path
    ),
)
@click.pass_context
def cli(ctx, protocol_dir):
    if protocol_dir is None:
        protocol_dir = pathlib.Path.cwd().resolve()
        while (
            protocol_dir.name != ""
            and not (protocol_dir / "docker-compose.yml").exists()
        ):
            protocol_dir = protocol_dir.parent
        if protocol_dir.name == "":
            raise click.ClickException("Unable to find protocol dir")
        click.confirm(f'Using protocol dir "{protocol_dir}"', default=True, abort=True)

    ctx.obj = protocol_dir


@cli.command()
@click.option("-c", "--content-node-replicas", default=3, type=int)
@click.pass_obj
def build(protocol_dir, creator_node_replicas):
    generate_env(protocol_dir, creator_node_replicas)

    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "build",
        ],
    )


@cli.command()
@click.option("-c", "--content-node-replicas", default=3, type=int)
@click.option("-d", "--discovery-node-replicas", default=3, type=int)
@click.pass_obj
def up(protocol_dir, creator_node_replicas, discovery_provider_replicas):
    generate_env(protocol_dir, creator_node_replicas)

    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "up",
            "--build",
            "--scale",
            f"content-node={creator_node_replicas}",
            "--scale",
            f"discovery-node={discovery_provider_replicas}",
            "-d",
        ],
    )


@cli.command()
@click.pass_obj
def down(protocol_dir):
    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "down",
            "-v",
        ],
    )


@cli.command()
@click.argument("service")
@click.argument("command")
@click.argument("args", nargs=-1)
@click.pass_obj
def exec(protocol_dir, service, command, args):
    index = 1
    split = service.rsplit("-", 1)
    if split[-1].isdigit():
        service, index = split

    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "exec",
            "--index",
            str(index),
            service,
            command,
            *args,
        ],
    )


@cli.command()
@click.pass_obj
def ps(protocol_dir):
    proc = subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "ps",
            "--format=json",
        ],
        capture_output=True,
    )

    if proc.returncode != 0:
        raise click.ClickException(proc.stderr.decode())

    services = json.loads(proc.stdout.decode())
    services.sort(key=lambda x: x["Name"])

    print(
        "CONTAINER ID".ljust(13),
        "NAME".ljust(25),
        "STATUS".ljust(10),
        "PORTS",
    )

    for service in services:
        if service["Service"] == "proxy":
            continue

        name = service["Service"]
        replica = int(service["Name"].split("-")[-1])
        status = service["Health"] or service["State"]

        ports = {}
        if service["Publishers"]:
            for publisher in service["Publishers"]:
                if publisher["PublishedPort"]:
                    ports[publisher["PublishedPort"]] = publisher["TargetPort"]

        if service["Service"] == "content-node":
            name = f"{service['Service']}-{replica}"
            ports[4000 + replica - 1] = 4000
        if service["Service"] == "discovery-node":
            name = f"{service['Service']}-{replica}"
            ports[5000 + replica - 1] = 5000

        ports = sorted(ports.items())
        ports = ", ".join(f"{target}->{published}" for target, published in ports)

        print(
            service["ID"][:12].ljust(13),
            name.ljust(25),
            status.ljust(10),
            ports,
        )


@cli.command()
@click.argument("service")
@click.pass_obj
def logs(protocol_dir, service):
    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            protocol_dir,
            "logs",
            service,
        ],
    )


if __name__ == "__main__":
    cli()
