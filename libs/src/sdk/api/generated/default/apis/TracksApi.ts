// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Coliving V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrackResponse,
    TrackResponseFromJSON,
    TrackResponseToJSON,
    TrackSearch,
    TrackSearchFromJSON,
    TrackSearchToJSON,
    TracksResponse,
    TracksResponseFromJSON,
    TracksResponseToJSON,
} from '../models';

export interface GetBulkTracksRequest {
    /**
     * The permalink of the track(s)
     */
    permalink?: Array<string>;
    /**
     * The ID of the track(s)
     */
    id?: Array<string>;
}

export interface GetTrackRequest {
    /**
     * A Track ID
     */
    trackId: string;
}

export interface GetTrendingTracksRequest {
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingTracksTimeEnum;
}

export interface SearchTracksRequest {
    /**
     * The search query
     */
    query: string;
    /**
     * Return only downloadable tracks
     */
    onlyDownloadable?: string;
}

export interface StreamTrackRequest {
    /**
     * A Track ID
     */
    trackId: string;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /**
     * Gets a list of tracks using their IDs or permalinks
     */
    async getBulkTracks(requestParameters: GetBulkTracksRequest = {}): Promise<NonNullable<TracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.permalink) {
            queryParameters['permalink'] = requestParameters.permalink;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TracksResponse["data"]>>;
    }

    /**
     * Gets a track by ID
     */
    async getTrack(requestParameters: GetTrackRequest): Promise<NonNullable<TrackResponse["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrackResponse["data"]>>;
    }

    /**
     * Gets the top 100 trending (most popular) tracks on Coliving
     */
    async getTrendingTracks(requestParameters: GetTrendingTracksRequest = {}): Promise<NonNullable<TracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TracksResponse["data"]>>;
    }

    /**
     * Search for a track or tracks
     */
    async searchTracks(requestParameters: SearchTracksRequest): Promise<NonNullable<TrackSearch["data"]>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchTracks.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.onlyDownloadable !== undefined) {
            queryParameters['only_downloadable'] = requestParameters.onlyDownloadable;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrackSearch["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTrendingTracksTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
