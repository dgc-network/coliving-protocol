// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Coliving V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PlaylistResponse,
    PlaylistResponseFromJSON,
    PlaylistResponseToJSON,
    PlaylistSearchResult,
    PlaylistSearchResultFromJSON,
    PlaylistSearchResultToJSON,
    PlaylistTracksResponse,
    PlaylistTracksResponseFromJSON,
    PlaylistTracksResponseToJSON,
    TrendingPlaylistsResponse,
    TrendingPlaylistsResponseFromJSON,
    TrendingPlaylistsResponseToJSON,
} from '../models';

export interface GetPlaylistRequest {
    /**
     * A Playlist ID
     */
    playlistId: string;
}

export interface GetPlaylistTracksRequest {
    /**
     * A Playlist ID
     */
    playlistId: string;
}

export interface GetTrendingPlaylistsRequest {
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingPlaylistsTimeEnum;
}

export interface SearchPlaylistsRequest {
    /**
     * The search query
     */
    query: string;
}

/**
 * 
 */
export class PlaylistsApi extends runtime.BaseAPI {

    /**
     * Get a playlist by ID
     */
    async getPlaylist(requestParameters: GetPlaylistRequest): Promise<NonNullable<PlaylistResponse["data"]>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/playlists/{playlist_id}`.replace(`{${"playlist_id"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<PlaylistResponse["data"]>>;
    }

    /**
     * Fetch tracks within a playlist.
     */
    async getPlaylistTracks(requestParameters: GetPlaylistTracksRequest): Promise<NonNullable<PlaylistTracksResponse["data"]>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getPlaylistTracks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/playlists/{playlist_id}/tracks`.replace(`{${"playlist_id"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<PlaylistTracksResponse["data"]>>;
    }

    /**
     * Gets trending playlists for a time period
     */
    async getTrendingPlaylists(requestParameters: GetTrendingPlaylistsRequest = {}): Promise<NonNullable<TrendingPlaylistsResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/playlists/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrendingPlaylistsResponse["data"]>>;
    }

    /**
     * Search for a playlist
     */
    async searchPlaylists(requestParameters: SearchPlaylistsRequest): Promise<NonNullable<PlaylistSearchResult["data"]>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchPlaylists.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/playlists/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<PlaylistSearchResult["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTrendingPlaylistsTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
