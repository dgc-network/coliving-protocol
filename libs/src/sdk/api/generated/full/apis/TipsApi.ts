// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetTipsResponse,
    GetTipsResponseFromJSON,
    GetTipsResponseToJSON,
} from '../models';

export interface GetTipsRequest {
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Only include tips to recipients that have this many followers
     */
    receiverMinFollowers?: number;
    /**
     * Only include tips to recipients that are verified
     */
    receiverIsVerified?: boolean;
    /**
     * Only include tips involving the user\&#39;s followers in the given capacity. Requires user_id to be set.
     */
    currentUserFollows?: GetTipsCurrentUserFollowsEnum;
    /**
     * Only include the most recent tip for a user was involved in the given capacity.  Eg. \&#39;sender\&#39; will ensure that each tip returned has a unique sender, using the most recent tip sent by a user if that user has sent multiple tips.     
     */
    uniqueBy?: GetTipsUniqueByEnum;
    /**
     * The minimum Solana slot to pull tips from
     */
    minSlot?: number;
    /**
     * The maximum Solana slot to pull tips from
     */
    maxSlot?: number;
    /**
     * A list of transaction signatures of tips to fetch
     */
    txSignatures?: Array<string>;
}

/**
 * 
 */
export class TipsApi extends runtime.BaseAPI {

    /**
     * Gets the most recent tips on the network
     */
    async getTips(requestParameters: GetTipsRequest = {}): Promise<NonNullable<GetTipsResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.receiverMinFollowers !== undefined) {
            queryParameters['receiver_min_followers'] = requestParameters.receiverMinFollowers;
        }

        if (requestParameters.receiverIsVerified !== undefined) {
            queryParameters['receiver_is_verified'] = requestParameters.receiverIsVerified;
        }

        if (requestParameters.currentUserFollows !== undefined) {
            queryParameters['current_user_follows'] = requestParameters.currentUserFollows;
        }

        if (requestParameters.uniqueBy !== undefined) {
            queryParameters['unique_by'] = requestParameters.uniqueBy;
        }

        if (requestParameters.minSlot !== undefined) {
            queryParameters['min_slot'] = requestParameters.minSlot;
        }

        if (requestParameters.maxSlot !== undefined) {
            queryParameters['max_slot'] = requestParameters.maxSlot;
        }

        if (requestParameters.txSignatures) {
            queryParameters['tx_signatures'] = requestParameters.txSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tips`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<GetTipsResponse["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTipsCurrentUserFollowsEnum {
    Sender = 'sender',
    Receiver = 'receiver',
    SenderOrReceiver = 'sender_or_receiver'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTipsUniqueByEnum {
    Sender = 'sender',
    Receiver = 'receiver'
}
