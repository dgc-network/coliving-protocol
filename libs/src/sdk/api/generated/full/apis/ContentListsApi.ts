// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FollowingResponse,
    FollowingResponseFromJSON,
    FollowingResponseToJSON,
    FullContentListResponse,
    FullContentListResponseFromJSON,
    FullContentListResponseToJSON,
    FullTrendingContentListsResponse,
    FullTrendingContentListsResponseFromJSON,
    FullTrendingContentListsResponseToJSON,
} from '../models';

export interface GetContentListRequest {
    /**
     * A ContentList ID
     */
    contentListId: string;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetTrendingContentListsRequest {
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingContentListsTimeEnum;
}

export interface GetTrendingContentListsWithVersionRequest {
    /**
     * The strategy version of trending to use
     */
    version: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingContentListsWithVersionTimeEnum;
}

export interface GetUsersFromContentListFavoritesRequest {
    /**
     * A ContentList ID
     */
    contentListId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetUsersFromContentListRepostsRequest {
    /**
     * A ContentList ID
     */
    contentListId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

/**
 * 
 */
export class ContentListsApi extends runtime.BaseAPI {

    /**
     * Get a contentList by ID
     */
    async getContentList(requestParameters: GetContentListRequest): Promise<NonNullable<FullContentListResponse["data"]>> {
        if (requestParameters.contentListId === null || requestParameters.contentListId === undefined) {
            throw new runtime.RequiredError('contentListId','Required parameter requestParameters.contentListId was null or undefined when calling getContentList.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/contentLists/{content_list_id}`.replace(`{${"content_list_id"}}`, encodeURIComponent(String(requestParameters.contentListId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullContentListResponse["data"]>>;
    }

    /**
     * Returns trending contentLists for a time period
     */
    async getTrendingContentLists(requestParameters: GetTrendingContentListsRequest = {}): Promise<NonNullable<FullTrendingContentListsResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/contentLists/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTrendingContentListsResponse["data"]>>;
    }

    /**
     * Returns trending contentLists for a time period based on the given trending version
     */
    async getTrendingContentListsWithVersion(requestParameters: GetTrendingContentListsWithVersionRequest): Promise<NonNullable<FullTrendingContentListsResponse["data"]>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getTrendingContentListsWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/contentLists/trending/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTrendingContentListsResponse["data"]>>;
    }

    /**
     * Get users that favorited a contentList
     */
    async getUsersFromContentListFavorites(requestParameters: GetUsersFromContentListFavoritesRequest): Promise<NonNullable<FollowingResponse["data"]>> {
        if (requestParameters.contentListId === null || requestParameters.contentListId === undefined) {
            throw new runtime.RequiredError('contentListId','Required parameter requestParameters.contentListId was null or undefined when calling getUsersFromContentListFavorites.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/contentLists/{content_list_id}/favorites`.replace(`{${"content_list_id"}}`, encodeURIComponent(String(requestParameters.contentListId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FollowingResponse["data"]>>;
    }

    /**
     * Get users that reposted a contentList
     */
    async getUsersFromContentListReposts(requestParameters: GetUsersFromContentListRepostsRequest): Promise<NonNullable<FollowingResponse["data"]>> {
        if (requestParameters.contentListId === null || requestParameters.contentListId === undefined) {
            throw new runtime.RequiredError('contentListId','Required parameter requestParameters.contentListId was null or undefined when calling getUsersFromContentListReposts.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/contentLists/{content_list_id}/reposts`.replace(`{${"content_list_id"}}`, encodeURIComponent(String(requestParameters.contentListId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FollowingResponse["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTrendingContentListsTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrendingContentListsWithVersionTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
