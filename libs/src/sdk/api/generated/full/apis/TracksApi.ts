// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FullTrackResponse,
    FullTrackResponseFromJSON,
    FullTrackResponseToJSON,
    FullTracksResponse,
    FullTracksResponseFromJSON,
    FullTracksResponseToJSON,
    RemixesResponseFull,
    RemixesResponseFullFromJSON,
    RemixesResponseFullToJSON,
    RemixingResponse,
    RemixingResponseFromJSON,
    RemixingResponseToJSON,
    StemsResponse,
    StemsResponseFromJSON,
    StemsResponseToJSON,
    TrackFavoritesResponseFull,
    TrackFavoritesResponseFullFromJSON,
    TrackFavoritesResponseFullToJSON,
    TrackRepostsResponseFull,
    TrackRepostsResponseFullFromJSON,
    TrackRepostsResponseFullToJSON,
    TrendingIdsResponse,
    TrendingIdsResponseFromJSON,
    TrendingIdsResponseToJSON,
} from '../models';

export interface GetBulkTracksRequest {
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * The permalink of the track(s)
     */
    permalink?: Array<string>;
    /**
     * The ID of the track(s)
     */
    id?: Array<string>;
}

export interface GetMostLovedTracksRequest {
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Number of tracks to fetch
     */
    limit?: number;
    /**
     * Boolean to include user info with tracks
     */
    withUsers?: boolean;
}

export interface GetRecommendedTracksRequest {
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetRecommendedTracksTimeEnum;
    /**
     * List of track ids to exclude
     */
    exclusionList?: Array<number>;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetRecommendedTracksWithVersionRequest {
    /**
     * The strategy version of trending to use
     */
    version: string;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetRecommendedTracksWithVersionTimeEnum;
    /**
     * List of track ids to exclude
     */
    exclusionList?: Array<number>;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetRemixableTracksRequest {
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Boolean to include user info with tracks
     */
    withUsers?: boolean;
}

export interface GetTrackRequest {
    /**
     * A Track ID
     */
    trackId: string;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * The User handle of the track owner
     */
    handle?: string;
    /**
     * The URLized title of the track
     */
    urlTitle?: string;
    /**
     * Whether or not to show unlisted tracks
     */
    showUnlisted?: boolean;
}

export interface GetTrackRemixParentsRequest {
    /**
     * A Track ID
     */
    trackId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetTrackRemixesRequest {
    /**
     * A Track ID
     */
    trackId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetTrackStemsRequest {
    /**
     * A Track ID
     */
    trackId: string;
}

export interface GetTrendingTrackIDsRequest {
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
}

export interface GetTrendingTracksRequest {
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingTracksTimeEnum;
}

export interface GetTrendingTracksIDsWithVersionRequest {
    /**
     * The strategy version of trending to use
     */
    version: string;
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
}

export interface GetTrendingTracksWithVersionRequest {
    /**
     * The strategy version of trending to use
     */
    version: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Filter trending to a specified genre
     */
    genre?: string;
    /**
     * Calculate trending over a specified time range
     */
    time?: GetTrendingTracksWithVersionTimeEnum;
}

export interface GetUnderTheRadarTracksRequest {
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * Filters for activity that is original vs reposts
     */
    filter?: GetUnderTheRadarTracksFilterEnum;
    /**
     * Whether to only include tracks
     */
    tracksOnly?: boolean;
    /**
     * Boolean to include user info with tracks
     */
    withUsers?: boolean;
}

export interface GetUndergroundTrendingTracksRequest {
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetUndergroundTrendingTracksWithVersionRequest {
    /**
     * The strategy version of trending to user
     */
    version: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetUsersFromFavoritesRequest {
    /**
     * A Track ID
     */
    trackId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

export interface GetUsersFromRepostsRequest {
    /**
     * A Track ID
     */
    trackId: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /**
     * Gets the tracks found on the \"Best New Releases\" smart playlist
     */
    async bestNewReleases(): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/best_new_releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets a list of tracks using their IDs or permalinks
     */
    async getBulkTracks(requestParameters: GetBulkTracksRequest = {}): Promise<NonNullable<FullTrackResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.permalink) {
            queryParameters['permalink'] = requestParameters.permalink;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTrackResponse["data"]>>;
    }

    /**
     * Gets the tracks found on the \"Most Loved\" smart playlist
     */
    async getMostLovedTracks(requestParameters: GetMostLovedTracksRequest = {}): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/most_loved`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Get recommended tracks
     */
    async getRecommendedTracks(requestParameters: GetRecommendedTracksRequest = {}): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.exclusionList) {
            queryParameters['exclusion_list'] = requestParameters.exclusionList;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/recommended`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Get recommended tracks using the given trending strategy version
     */
    async getRecommendedTracksWithVersion(requestParameters: GetRecommendedTracksWithVersionRequest): Promise<NonNullable<FullTracksResponse["data"]>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getRecommendedTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.exclusionList) {
            queryParameters['exclusion_list'] = requestParameters.exclusionList;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/recommended/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets a list of tracks that have stems available for remixing
     */
    async getRemixableTracks(requestParameters: GetRemixableTracksRequest = {}): Promise<NonNullable<FullTrackResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/remixables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTrackResponse["data"]>>;
    }

    /**
     * Gets a track by ID. If `show_unlisted` is true, then `handle` and `url_title` are required.
     */
    async getTrack(requestParameters: GetTrackRequest): Promise<NonNullable<FullTrackResponse["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrack.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.handle !== undefined) {
            queryParameters['handle'] = requestParameters.handle;
        }

        if (requestParameters.urlTitle !== undefined) {
            queryParameters['url_title'] = requestParameters.urlTitle;
        }

        if (requestParameters.showUnlisted !== undefined) {
            queryParameters['show_unlisted'] = requestParameters.showUnlisted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTrackResponse["data"]>>;
    }

    /**
     * Gets all the tracks that the given track remixes
     */
    async getTrackRemixParents(requestParameters: GetTrackRemixParentsRequest): Promise<NonNullable<RemixingResponse["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackRemixParents.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}/remixing`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<RemixingResponse["data"]>>;
    }

    /**
     * Get all tracks that remix the given track
     */
    async getTrackRemixes(requestParameters: GetTrackRemixesRequest): Promise<NonNullable<RemixesResponseFull["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackRemixes.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}/remixes`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<RemixesResponseFull["data"]>>;
    }

    /**
     * Get the remixable stems of a track
     */
    async getTrackStems(requestParameters: GetTrackStemsRequest): Promise<NonNullable<StemsResponse["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackStems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}/stems`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<StemsResponse["data"]>>;
    }

    /**
     * Gets the track IDs of the top trending tracks on Coliving
     */
    async getTrendingTrackIDs(requestParameters: GetTrendingTrackIDsRequest = {}): Promise<NonNullable<TrendingIdsResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrendingIdsResponse["data"]>>;
    }

    /**
     * Gets the top 100 trending (most popular) tracks on Coliving
     */
    async getTrendingTracks(requestParameters: GetTrendingTracksRequest = {}): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets the track IDs of the top trending tracks on Coliving based on the given trending strategy version
     */
    async getTrendingTracksIDsWithVersion(requestParameters: GetTrendingTracksIDsWithVersionRequest): Promise<NonNullable<TrendingIdsResponse["data"]>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getTrendingTracksIDsWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending/ids/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrendingIdsResponse["data"]>>;
    }

    /**
     * Gets the top 100 trending (most popular tracks on Coliving using a given trending strategy version
     */
    async getTrendingTracksWithVersion(requestParameters: GetTrendingTracksWithVersionRequest): Promise<NonNullable<FullTracksResponse["data"]>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getTrendingTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets the tracks found on the \"Under the Radar\" smart playlist
     */
    async getUnderTheRadarTracks(requestParameters: GetUnderTheRadarTracksRequest = {}): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.tracksOnly !== undefined) {
            queryParameters['tracks_only'] = requestParameters.tracksOnly;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/under_the_radar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets the top 100 trending underground tracks on Coliving
     */
    async getUndergroundTrendingTracks(requestParameters: GetUndergroundTrendingTracksRequest = {}): Promise<NonNullable<FullTracksResponse["data"]>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending/underground`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Gets the top 100 trending underground tracks on Coliving using a given trending strategy version
     */
    async getUndergroundTrendingTracksWithVersion(requestParameters: GetUndergroundTrendingTracksWithVersionRequest): Promise<NonNullable<FullTracksResponse["data"]>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getUndergroundTrendingTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/trending/underground/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<FullTracksResponse["data"]>>;
    }

    /**
     * Get users that favorited a track
     */
    async getUsersFromFavorites(requestParameters: GetUsersFromFavoritesRequest): Promise<NonNullable<TrackFavoritesResponseFull["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getUsersFromFavorites.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}/favorites`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrackFavoritesResponseFull["data"]>>;
    }

    /**
     * Get the users that reposted a track
     */
    async getUsersFromReposts(requestParameters: GetUsersFromRepostsRequest): Promise<NonNullable<TrackRepostsResponseFull["data"]>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getUsersFromReposts.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/tracks/{track_id}/reposts`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<TrackRepostsResponseFull["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetRecommendedTracksTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
/**
    * @export
    * @enum {string}
    */
export enum GetRecommendedTracksWithVersionTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrendingTracksTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrendingTracksWithVersionTimeEnum {
    Week = 'week',
    Month = 'month',
    Year = 'year',
    AllTime = 'allTime'
}
/**
    * @export
    * @enum {string}
    */
export enum GetUnderTheRadarTracksFilterEnum {
    All = 'all',
    Repost = 'repost',
    Original = 'original'
}
