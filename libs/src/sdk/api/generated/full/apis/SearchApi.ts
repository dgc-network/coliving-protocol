// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SearchAutocompleteResponse,
    SearchAutocompleteResponseFromJSON,
    SearchAutocompleteResponseToJSON,
    SearchFullResponse,
    SearchFullResponseFromJSON,
    SearchFullResponseToJSON,
} from '../models';

export interface SearchRequest {
    /**
     * The search query
     */
    query: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * The type of response, one of: all, users, agreements, contentLists, or albums
     */
    kind?: SearchKindEnum;
}

export interface SearchAutocompleteRequest {
    /**
     * The search query
     */
    query: string;
    /**
     * The number of items to skip. Useful for pagination (page number * limit)
     */
    offset?: number;
    /**
     * The number of items to fetch
     */
    limit?: number;
    /**
     * The user ID of the user making the request
     */
    userId?: string;
    /**
     * The type of response, one of: all, users, agreements, contentLists, or albums
     */
    kind?: SearchAutocompleteKindEnum;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Get Users/Agreements/ContentLists/Albums that best match the search query
     */
    async search(requestParameters: SearchRequest): Promise<NonNullable<SearchFullResponse["data"]>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling search.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/search/full`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<SearchFullResponse["data"]>>;
    }

    /**
     * Same as search but optimized for quicker response at the cost of some entity information.
     * Get Users/Agreements/ContentLists/Albums that best match the search query
     */
    async searchAutocomplete(requestParameters: SearchAutocompleteRequest): Promise<NonNullable<SearchAutocompleteResponse["data"]>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchAutocomplete.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return this.request({
            path: `/search/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }) as Promise<NonNullable<SearchAutocompleteResponse["data"]>>;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SearchKindEnum {
    All = 'all',
    Users = 'users',
    Agreements = 'agreements',
    ContentLists = 'contentLists',
    Albums = 'albums'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchAutocompleteKindEnum {
    All = 'all',
    Users = 'users',
    Agreements = 'agreements',
    ContentLists = 'contentLists',
    Albums = 'albums'
}
